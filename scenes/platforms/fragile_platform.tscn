[gd_scene load_steps=4 format=2]

[ext_resource path="res://sfx/variable_volume.gd" type="Script" id=1]
[ext_resource path="res://sfx/66779__kevinkace__crate-break-3.wav" type="AudioStream" id=2]

[sub_resource type="GDScript" id=1]
script/source = "extends RigidBody2D


const SPLIT_PADDING_FRACTION := 0.1
const FADE_TIME := 1.5
const DISABLE_TIME := 1.3
const DELAY_TIME := 0.5
const DENSITY := 0.2
const IMPULSE_MODIFIER := 0.1

var _width: float
var _offset: Vector2
var _is_offset_queued := false
var _tween: Tween

onready var _variable_volume: VariableVolume = $VariableVolume
onready var _stream: AudioStreamPlayer2D = $AudioStreamPlayer2D


func build(start_origin: Vector2, end_origin: Vector2, thickness: int):
	_width = end_origin.distance_to(start_origin)
	PlatformTools.base_platformify(self, start_origin, end_origin, thickness)
	mass = start_origin.distance_to(end_origin) * DENSITY


func _integrate_forces(state: Physics2DDirectBodyState):
	if _is_offset_queued:
		_is_offset_queued = false
		state.transform.origin += _offset
	
	if !contact_monitor or state.get_contact_count() == 0:
		return
	
	call_deferred(\"set_mode\", RigidBody2D.MODE_RIGID)
	contact_monitor = false
	var contact_point := state.get_contact_local_position(0) - global_position
	var impulse: Vector2 = state.get_contact_collider_velocity_at_position(0) * state.get_contact_collider_object(0).mass * IMPULSE_MODIFIER
	contact_point = global_transform.basis_xform_inv(contact_point)
	
	_tween = Tween.new()
	# warning-ignore:return_value_discarded
	_tween.interpolate_property(self, \"modulate:a\", 1.0, 0, FADE_TIME, Tween.TRANS_QUAD, Tween.EASE_OUT, DELAY_TIME)
	# warning-ignore:return_value_discarded
	_tween.connect(\"tween_all_completed\", self, \"queue_free\")
	add_child(_tween)
		
	var timer := Timer.new()
	timer.wait_time = DISABLE_TIME
	# warning-ignore:return_value_discarded
	timer.connect(\"timeout\", self, \"set_collision_mask\", [0])
	# warning-ignore:return_value_discarded
	timer.connect(\"timeout\", self, \"set_collision_layer\", [0])
	add_child(timer)
	var sibling: SiblingFragilePlatform = null
	
	if abs(contact_point.x) < _width * (1 - SPLIT_PADDING_FRACTION) / 2:
		var total_mass := mass
		var bar_mesh: MeshInstance2D = $BarMesh
		
		$LeftCapShape.position.x = - (_width / 2 + contact_point.x) / 2
		$LeftCapMesh.position.x = - (_width / 2 + contact_point.x) / 2
		bar_mesh.mesh.size.x = _width / 2 + contact_point.x
		var offset: Vector2 = global_transform.x * (_width / 2 - bar_mesh.mesh.size.x / 2)
#		visible = false
		var thickness: float = bar_mesh.mesh.size.y
		bar_mesh.position.x = 0
		mass = total_mass * bar_mesh.mesh.size.x / _width
		
		var bar_shape: CollisionShape2D = $BarShape
		bar_shape.shape.extents.x = bar_mesh.mesh.size.x / 2
		bar_shape.position.x = 0
		
		sibling = SiblingFragilePlatform.new()
		sibling.modulate = modulate
		sibling.collision_layer = collision_layer
		sibling.collision_mask = collision_mask
#		sibling.visible = false

		bar_mesh = MeshInstance2D.new()
		var mesh := QuadMesh.new()
		mesh.size = Vector2(_width / 2 - contact_point.x, thickness)
		bar_mesh.mesh = mesh
#		bar_mesh.position.x = (_width - mesh.size.x) / 2
		bar_mesh.visible = PlatformTools.VISIBLE_MESHES
		sibling.mass = total_mass * bar_mesh.mesh.size.x / _width
		sibling.add_child(bar_mesh)

		var right_cap := $RightCapMesh
		remove_child(right_cap)
		sibling.add_child(right_cap)
		right_cap.position.x = (_width / 2 - contact_point.x) / 2
		right_cap = $RightCapShape
		right_cap.position.x = (_width / 2 - contact_point.x) / 2
		remove_child(right_cap)
		sibling.add_child(right_cap)

		bar_shape = CollisionShape2D.new()
		bar_shape.shape = RectangleShape2D.new()
		bar_shape.shape.extents = Vector2(bar_mesh.mesh.size.x, thickness) / 2
#		bar_shape.position.x = mesh.size.x / 2
		sibling.add_child(bar_shape)

		sibling.transform = global_transform
		sibling.position += global_transform.x * (_width / 2 - bar_mesh.mesh.size.x / 2)
#		global_position -= offset
		get_parent().call_deferred(\"add_child\", sibling)
		
		sibling._tween = Tween.new()
		sibling.add_child(sibling._tween)
		# warning-ignore:return_value_discarded
		sibling._tween.interpolate_property(sibling, \"modulate:a\", 1.0, 0, FADE_TIME, Tween.TRANS_QUAD, Tween.EASE_OUT, DELAY_TIME)
		# warning-ignore:return_value_discarded
		sibling._tween.connect(\"tween_all_completed\", sibling, \"queue_free\")
		# warning-ignore:return_value_discarded
		timer.connect(\"timeout\", sibling, \"set_collision_mask\", [0])
		# warning-ignore:return_value_discarded
		timer.connect(\"timeout\", sibling, \"set_collision_layer\", [0])
		
		yield(get_tree(), \"idle_frame\")
		state.transform.origin -= offset
		
	yield(get_tree(), \"idle_frame\")
	# warning-ignore:return_value_discarded
	_tween.start()
	timer.start()
	
	_stream.volume_db = _variable_volume.calculate_volume(impulse.length())
	_stream.play()
	
	state.apply_impulse(
		contact_point,
		impulse
	)
	
	if sibling != null:
	# warning-ignore:return_value_discarded
		sibling._tween.start()
		sibling.apply_impulse(
			contact_point,
			impulse
		)


func prepare_for_death(offset: Vector2):
	if contact_monitor or not is_inside_tree():
		return

	var current_scene := get_tree().current_scene

	_is_offset_queued = true
	_offset = offset
	get_parent().remove_child(self)
	current_scene.add_child(self)
	# warning-ignore:return_value_discarded
	_tween.resume_all()


func prepare_for_advancement(offset: Vector2):
	if contact_monitor:
		return
	
	_is_offset_queued = true
	_offset = offset
"

[node name="RigidBody2D" type="RigidBody2D"]
modulate = Color( 1, 0.2, 0.2, 1 )
collision_mask = 2
mode = 3
contacts_reported = 1
contact_monitor = true
script = SubResource( 1 )

[node name="VariableVolume" type="Node" parent="."]
script = ExtResource( 1 )
max_stimuli_value = 1200.0
max_volume_db = 12.0

[node name="AudioStreamPlayer2D" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource( 2 )
pitch_scale = 0.77
